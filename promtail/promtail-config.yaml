server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*log

  - job_name: containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging=promtail"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        target_label: "container"
      - source_labels: ["__meta_docker_container_log_stream"]
        target_label: "logstream"
      - source_labels: ["__meta_docker_container_label_logging_jobname"]
        target_label: "job"

  # setup below is for custom application logs, if you have specific logs to monitor, you can uncomment and adjust these sections, so with this promtail configuration, you can monitor logs from your backend API, nginx, Grafana, or any custom application logs.

  # Application logs from your backend API
  # - job_name: backend-api
  #   static_configs:
  #     - targets:
  #         - localhost
  #       labels:
  #         job: backend-api
  #         service: my-api
  #         __path__: /host/logs/api/*.log

  # Nginx logs
  - job_name: nginx-container
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: ["nginx", "web-server"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        target_label: "container_name"
      - replacement: "nginx"
        target_label: "job"
      - replacement: "nginx"
        target_label: "service"
    pipeline_stages:
      # Parse nginx access logs
      - regex:
          expression: '^(?P<remote_addr>\S+) - (?P<remote_user>\S+) \[(?P<time_local>[^\]]+)\] "(?P<method>\S+) (?P<request_uri>\S+) (?P<protocol>\S+)" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)"'
      - labels:
          method:
          status:
          remote_addr:

  # Nginx logs
  - job_name: redis-container
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: ["redis", "redis-server", "redis-stack"]  # Common Redis container names
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        target_label: "container_name"
      - replacement: "redis"
        target_label: "job"
      - replacement: "redis"
        target_label: "service"
    pipeline_stages:
      # Redis log parsing
      - regex:
          expression: '^(?P<pid>\d+):(?P<role>\w+) (?P<timestamp>\d{2} \w{3} \d{4} \d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>[*#-]) (?P<message>.*)'
      - labels:
          level:
          role:
      - timestamp:
          source: timestamp
          format: "02 Jan 2006 15:04:05.000"

  # Grafana logs (from your existing setup)
  - job_name: grafana
    static_configs:
      - targets:
          - localhost
        labels:
          job: grafana
          service: grafana
          __path__: /host/logs/grafana/*.log

  # # Custom application logs with JSON parsing
  # - job_name: json-logs
  #   static_configs:
  #     - targets:
  #         - localhost
  #       labels:
  #         job: json-logs
  #         service: my-app
  #         __path__: /host/logs/app/*.json
  #   pipeline_stages:
  #     - json:
  #         expressions:
  #           level: level
  #           message: message
  #           timestamp: timestamp
  #           endpoint: endpoint
  #           method: method
  #           status_code: status_code
  #           response_time: response_time
  #     - labels:
  #         level:
  #         endpoint:
  #         method:
  #         status_code:
  #     - timestamp:
  #         source: timestamp
  #         format: RFC3339Nano
